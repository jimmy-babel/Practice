'use client'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import { supabase, Post } from '@/lib/supabase'
import Profile from "@/components/profile";
import SetLayout from "@/components/set-layout";
import Nav from "@/components/nav";
import Image from 'next/image';

export default function Home() {
  const [posts, setPosts] = useState<Post[]>([])
  const [loading, setLoading] = useState(true)
  const [user, setUser] = useState<any>(null)
  const [userProfile, setUserProfile] = useState<any>(null)
  const extraClass = `md:w-[70%] max-md:w-[82%] max-md:min-w-[500px]`
  
  // const extraClass = `lg:w-[840px] xl:w-[1050px] 2xl:w-[1259px]`
  console.log('PAGE HOME',posts,loading,user,userProfile);

  useEffect(() => {
    let mounted = true

    const initializeApp = async () => {
      try {
        // 先检查用户状态
        await checkUser()
        // 然后获取文章数据
        if (mounted) {
          await fetchPosts()
        }
      } catch (error) {
        console.error('初始化应用时出错:', error)
        setLoading(false)
      }
    }

    // 设置超时保护，10秒后强制停止加载状态
    const timeoutId = setTimeout(() => {
      if (mounted) {
        console.log('加载超时，强制停止加载状态')
        setLoading(false)
      }
    }, 10000)

    initializeApp().finally(() => {
      clearTimeout(timeoutId)
    })

    // 监听认证状态变化
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('监听认证状态变化 onAuthStateChange',event,session);
        if (!mounted) return
        
        if (event === 'SIGNED_IN' && session) {
          setUser(session.user)
          try {
            // 获取用户配置信息
            const { data: profile, error } = await supabase
              .from('profiles')
              .select('*')
              .eq('id', session.user.id)
              .single()
            console.log('数据库select * from profiles',profile,error);
            setUserProfile(!error && profile ? profile : null)
          } catch (error) {
            console.error('获取用户配置时出错:', error)
            setUserProfile(null)
          }
        } else if (event === 'SIGNED_OUT') {
          setUser(null)
          setUserProfile(null)
        }
      }
    )

    setPosts([{},{},{},{},{},{},{},{}] as Post[])

    return () => {
      mounted = false
      subscription.unsubscribe()
    }
  }, [])

  const checkUser = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      setUser(user)
      
      if (user) {
        // 获取用户配置信息
        const { data: profile, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single()
        
        if (!error && profile) {
          setUserProfile(profile)
        } else {
          setUserProfile(null)
        }
      } else {
        setUserProfile(null)
      }
    } catch (error) {
      console.error('检查用户状态时出错:', error)
      setUser(null)
      setUserProfile(null)
    }
  }

  const handleSignOut = async () => {
    const { error } = await supabase.auth.signOut()
    console.log('singOut登出',error);
    if (!error) {
      setUser(null)
      setUserProfile(null)
      // 可选：显示退出成功消息
    }
  }

  const fetchPosts = async () => {
    try {
      console.log('fetchPosts');
      // 先获取文章数据
      const { data: postsData, error: postsError } = await supabase
        .from('posts')
        .select('*')
        .eq('published', true)
        .order('created_at', { ascending: false })

      console.log('fetchPosts then',postsData,postsError);
      if (postsError) {
        console.error('获取文章时出错:', postsError)
        setLoading(false)
        return
      }

      if (!postsData || postsData.length === 0) {
        // setPosts([]) //JIMMY 暂时注释掉
        setLoading(false)
        return
      }

      // 获取所有作者的 user_id
      const userIds = [...new Set(postsData.map(post => post.user_id).filter(Boolean))]
      
      if (userIds.length === 0) {
        // 如果没有用户ID，直接设置文章数据
        setPosts(postsData.map(post => ({ ...post, profiles: null })))
        setLoading(false)
        return
      }

      // 获取用户配置信息
      const { data: profilesData, error: profilesError } = await supabase
        .from('profiles')
        .select('*')
        .in('id', userIds)

      if (profilesError) {
        console.error('获取用户配置时出错:', profilesError)
        // 即使profiles出错，也要显示文章
        setPosts(postsData.map(post => ({ ...post, profiles: null })))
        setLoading(false)
        return
      }

      // 合并数据
      const postsWithProfiles = postsData.map(post => ({
        ...post,
        profiles: profilesData?.find(profile => profile.id === post.user_id) || null
      }))

      setPosts(postsWithProfiles)
    } catch (error) {
      console.error('获取文章时出错:', error)
      // 发生任何错误都要停止加载状态
      setPosts([])
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
          <p className="mt-4 text-gray-600">加载中...</p>
        </div>
      </div>
    )
  }

  // HTML部分
  return (
    // JIMMY1
    <SetLayout extraClass={extraClass} pageScroll safeArea>
      <Nav />
      
      <div className='w-full h-[30vh]'></div>
      <div className='w-full absolute h-[30vh] left-0 top-0 z-[-1] header-box'>
        <div className="w-full h-full relative">
          <Image
            fill
            className="w-full h-full object-cover"
            src="/blog-bg.webp"
            alt=""
          />
        </div>
      </div>
      
      <div className='content-box pt-5'>
        <div className='flex justify-between flex-wrap'>
          <div className='profile-box w-[25%] min-w-[250px] pr-5 pb-5'>
            <Profile></Profile>
          </div>
          <div className='blog-list-box flex-1'>
            {posts.map((post,index) => (
              <article key={post.id} className="mb-5 bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow">
                <div className="flex items-center mb-4">
                  <div className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-medium">
                    {post.profiles?.full_name?.[0] || post.profiles?.username?.[0] || '作'}
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-gray-900">
                      {post.profiles?.full_name || post.profiles?.username || '作者'}
                    </p>
                    <p className="text-sm text-gray-500">
                      {new Date(post.created_at).toLocaleDateString('zh-CN')}
                    </p>
                  </div>
                </div>
                
                <h3 className="text-xl font-semibold text-gray-900 mb-3">
                  <Link href={`/post/${post.slug}`} className="hover:text-blue-600">
                    {post.title}
                  </Link>
                </h3>
                
                {post.excerpt && (
                  <p className="text-gray-600 mb-4 line-clamp-3">
                    {post.excerpt}
                  </p>
                )}
                
                <Link 
                  href={`/post/${post.slug}`}
                  className="text-blue-600 hover:text-blue-800 font-medium"
                >
                  阅读更多 →
                </Link>
              </article>
            ))}
          </div>
        </div>
      </div>

      {/* JIMMY2 */}
      <div style={{display:"none"}} className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center">
                <h1 className="text-3xl font-bold text-gray-900">我的博客</h1>
              </div>
              <nav className="flex items-center space-x-4">
                {user ? (
                  // 已登录状态
                  <>
                    <Link 
                      href="/write" 
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium"
                    >
                      写文章
                    </Link>
                    <div className="flex items-center space-x-3">
                      {/* 用户头像 */}
                      <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-medium">
                        {userProfile?.full_name?.[0] || userProfile?.username?.[0] || user?.email?.[0] || 'U'}
                      </div>
                      {/* 用户名 */}
                      <span className="text-sm text-gray-700">
                        {userProfile?.full_name || userProfile?.username || user?.email}
                      </span>
                      {/* 登出按钮 */}
                      <button
                        onClick={handleSignOut}
                        className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                      >
                        登出
                      </button>
                    </div>
                  </>
                ) : (
                  // 未登录状态
                  <>
                    <Link 
                      href="/auth" 
                      className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                    >
                      登录
                    </Link>
                    <Link 
                      href="/write" 
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium"
                    >
                      写文章
                    </Link>
                  </>
                )}
              </nav>
            </div>
          </div>
        </header>

        <div className='content-box'>
          <Profile></Profile>
        </div>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid gap-8 lg:grid-cols-3">
            {/* Articles */}
            <div className="lg:col-span-2">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">最新文章</h2>
              
              {posts.length === 0 ? (
                <div className="text-center py-12">
                  <div className="text-gray-500 text-lg">还没有发布的文章</div>
                  <p className="text-gray-400 mt-2">开始写第一篇文章吧！</p>
                  <Link 
                    href="/write"
                    className="mt-4 inline-block bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium"
                  >
                    写文章
                  </Link>
                </div>
              ) : (
                <div className="space-y-8">
                  {/* {posts.map((post) => (
                    <article key={post.id} className="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow">
                                          <div className="flex items-center mb-4">
                        <div className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-medium">
                          {post.profiles?.full_name?.[0] || post.profiles?.username?.[0] || '作'}
                        </div>
                        <div className="ml-3">
                          <p className="text-sm font-medium text-gray-900">
                            {post.profiles?.full_name || post.profiles?.username || '作者'}
                          </p>
                          <p className="text-sm text-gray-500">
                            {new Date(post.created_at).toLocaleDateString('zh-CN')}
                          </p>
                        </div>
                      </div>
                      
                      <h3 className="text-xl font-semibold text-gray-900 mb-3">
                        <Link href={`/post/${post.slug}`} className="hover:text-blue-600">
                          {post.title}
                        </Link>
                      </h3>
                      
                      {post.excerpt && (
                        <p className="text-gray-600 mb-4 line-clamp-3">
                          {post.excerpt}
                        </p>
                      )}
                      
                      <Link 
                        href={`/post/${post.slug}`}
                        className="text-blue-600 hover:text-blue-800 font-medium"
                      >
                        阅读更多 →
                      </Link>
                    </article>
                  ))} */}
                </div>
              )}
            </div>

            {/* Sidebar */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">关于博客</h3>
                <p className="text-gray-600 text-sm leading-relaxed">
                  这是一个基于 Supabase 构建的现代博客系统，支持用户注册、文章发布、评论等功能。
                  使用 Next.js + TypeScript + Tailwind CSS 技术栈。
                </p>
              </div>

              <div className="bg-white rounded-lg shadow-sm p-6 mt-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">统计信息</h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">总文章数</span>
                    <span className="font-medium">{posts.length}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </SetLayout>
  )
}
